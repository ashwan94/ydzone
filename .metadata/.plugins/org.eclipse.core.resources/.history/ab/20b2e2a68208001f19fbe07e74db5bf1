package restaurant;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.session.SqlSession;

import common.PaginationInfo;
import common.SearchVO;

@WebServlet("/restaurant/stanby")
public class RestaurantStanbyServlet extends HttpServlet {
	private RestaurantService service;
	
	@Override
		public void init() throws ServletException {
			ServletContext servletContext = getServletContext();
			SqlSession session = (SqlSession)servletContext.getAttribute("sqlSession");
			this.service = new RestaurantService(session);
		}
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String searchType = request.getParameter("searchType");
		String searchWord = request.getParameter("searchWord");
		int userNo = Integer.parseInt(request.getParameter("userNo"));
		
		// 페이징 관련 코드
		String pageNo = request.getParameter("currentPageNo");
		
		int currentPageNo = pageNo == null ? 1 : Integer.parseInt(pageNo);
		// 실행 시 currentPageNo 는 반드시 1 을 보장
		
		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(currentPageNo);
		paginationInfo.setRecordCountPerPage(5);
		paginationInfo.setPageSize(10);
		SearchVO vo = new SearchVO(searchType, searchWord);
		
		int totalCount = service.getRestaurantListCount(vo); // DB 의 Restaurant Table 의 모든 data 개수를 가져옴
		paginationInfo.setTotalRecordCount(totalCount); // pagination 에 가져온 DB 모든 Restaurant 개수 저장
		// 페이징된 게시글 목록을 가져오기 위해
		vo.setFirstRecordIndex(paginationInfo.getFirstRecordIndex()); // SearchVO 에 paginationInfo 의 첫, 마지막 RecordIndex 정보 저장
		vo.setLastRecordIndex(paginationInfo.getLastRecordIndex());
		
		List<RestaurantVO> stanbyList = service.getRestaurantStanby(vo);
		List<SearchVO> boomList = service.getBoom(new SearchVO(userNo));
		System.out.println("가져와진 stanbyList");
		System.out.println(stanbyList);
		
		System.out.println("조회된 boomList");
		System.out.println(boomList);
		
		if(boomList.size() != 0) {
			// 조회된 stanbyList 는 현재 null
			// Query 문 어떻게 써야될지 몰라서 2번 작동시킨 것
			// boomList 에 parameter 로 입력받은 userNo 와 rstNo 로 
			// select query 에 userNo 기준으로 모든 투표 기록을 가져옴
			// Servlet 에서 이중 for문을 돌려 stanbyList 의 boom 에 가져온 투표 기록을 저장
			// boom 이 저장된 stanbyList 를 View 로 forward
			for(int i = 0; i < stanbyList.size(); i++) {
				for(int j = 0; j < boomList.size(); j++) {
					if(stanbyList.get(i).getNo() == boomList.get(j).getRstNo()) {
						stanbyList.get(i).setBoom(boomList.get(j).getBoom());
						stanbyList.get(i).setUserNo(boomList.get(j).getUserNo());
						
						System.out.print("조회된 Stanby 의 boom -> ");
						System.out.println(stanbyList.get(i).getRestaurantName());
						System.out.println(boomList.get(j).getUserNo());
						System.out.println(boomList.get(j).getBoom());
					}
				}
			}
		}
		
		if(stanbyList == null) {
			request.setAttribute("null", "입점 대기 중인 매장이 없습니다!");
			request.getRequestDispatcher("/WEB-INF/views/restaurant/stanby.jsp").forward(request, response);
		} else {
			request.setAttribute("pagination", paginationInfo);
			request.setAttribute("stanbyList", stanbyList);
			request.getRequestDispatcher("/WEB-INF/views/restaurant/stanby.jsp").forward(request, response);
		}
	}
}
