/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-04-30 01:19:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.kakaoMap;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class kakaoMap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<div class=\"map_wrap my-3\">\n");
      out.write("<div id=\"map\" class=\"rounded mt-3\" style=\"width:85%;height:80vh;position:relative;overflow:hidden;\"></div>\n");
      out.write("<div id=\"menu_wrap\" class=\"bg_white row\">\n");
      out.write("	<div class=\"col-1\"></div>\n");
      out.write("    <div class=\"option col-10\">\n");
      out.write("        <div>\n");
      out.write("            <form onsubmit=\"searchPlaces(); return false;\">\n");
      out.write("                <input type=\"text\" value=\"넥스트IT교육센터\" id=\"keyword\" size=\"15\" style=\"width:10vw; height:6vh; font-size:16px;\" class=\"text-center mt-3\"> \n");
      out.write("                <button type=\"submit\" class=\"btn btn-outline-dark\" style=\"width:3vw; height:6vh;\">검색</button> \n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"col-1\"></div>\n");
      out.write("    <hr>\n");
      out.write("    <ul id=\"placesList\"></ul>\n");
      out.write("    <div id=\"pagination\"></div>\n");
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("<div class=\"mb-5\"></div>\n");
      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=f723cb9688c933e6dc5fe72589256a69&libraries=services\"></script>\n");
      out.write("<script>\n");
      out.write("//마커를 담을 배열입니다\n");
      out.write("var markers = [];\n");
      out.write("\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div \n");
      out.write("    mapOption = {\n");
      out.write("        center: new kakao.maps.LatLng(36.3268116, 127.4076267), // 지도의 중심좌표\n");
      out.write("        level: 3 // 지도의 확대 레벨\n");
      out.write("    };  \n");
      out.write("\n");
      out.write("// 지도를 생성합니다    \n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); \n");
      out.write("\n");
      out.write("// 장소 검색 객체를 생성합니다\n");
      out.write("var ps = new kakao.maps.services.Places();  \n");
      out.write("\n");
      out.write("// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\n");
      out.write("var infowindow = new kakao.maps.InfoWindow({zIndex:1});\n");
      out.write("\n");
      out.write("// 키워드로 장소를 검색합니다\n");
      out.write("searchPlaces();\n");
      out.write("\n");
      out.write("// 키워드 검색을 요청하는 함수입니다\n");
      out.write("function searchPlaces() {\n");
      out.write("	\n");
      out.write("    var keyword = document.getElementById('keyword').value;\n");
      out.write("    \n");
      out.write("    if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\n");
      out.write("        alert('검색어를 입력해주세요!');\n");
      out.write("        return false;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\n");
      out.write("    ps.keywordSearch( keyword, placesSearchCB); \n");
      out.write("}\n");
      out.write("\n");
      out.write("// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n");
      out.write("function placesSearchCB(data, status, pagination) {\n");
      out.write("    if (status === kakao.maps.services.Status.OK) {\n");
      out.write("\n");
      out.write("        // 정상적으로 검색이 완료됐으면\n");
      out.write("        // 검색 목록과 마커를 표출합니다\n");
      out.write("        displayPlaces(data);\n");
      out.write("\n");
      out.write("        // 페이지 번호를 표출합니다\n");
      out.write("        displayPagination(pagination);\n");
      out.write("\n");
      out.write("    } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n");
      out.write("\n");
      out.write("        alert('검색 결과가 존재하지 않습니다.');\n");
      out.write("        return;\n");
      out.write("\n");
      out.write("    } else if (status === kakao.maps.services.Status.ERROR) {\n");
      out.write("\n");
      out.write("        alert('검색 결과 중 오류가 발생했습니다.');\n");
      out.write("        return;\n");
      out.write("\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 검색 결과 목록과 마커를 표출하는 함수입니다\n");
      out.write("function displayPlaces(places) {\n");
      out.write("\n");
      out.write("    var listEl = document.getElementById('placesList'), \n");
      out.write("    menuEl = document.getElementById('menu_wrap'),\n");
      out.write("    fragment = document.createDocumentFragment(), \n");
      out.write("    bounds = new kakao.maps.LatLngBounds(), \n");
      out.write("    listStr = '';\n");
      out.write("    \n");
      out.write("    // 검색 결과 목록에 추가된 항목들을 제거합니다\n");
      out.write("    removeAllChildNods(listEl);\n");
      out.write("\n");
      out.write("    // 지도에 표시되고 있는 마커를 제거합니다\n");
      out.write("    removeMarker();\n");
      out.write("    \n");
      out.write("    for ( var i=0; i<places.length; i++ ) {\n");
      out.write("\n");
      out.write("        // 마커를 생성하고 지도에 표시합니다\n");
      out.write("        var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\n");
      out.write("            marker = addMarker(placePosition, i), \n");
      out.write("            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\n");
      out.write("\n");
      out.write("        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n");
      out.write("        // LatLngBounds 객체에 좌표를 추가합니다\n");
      out.write("        bounds.extend(placePosition);\n");
      out.write("\n");
      out.write("        // 마커와 검색결과 항목에 mouseover 했을때\n");
      out.write("        // 해당 장소에 인포윈도우에 장소명을 표시합니다\n");
      out.write("        // mouseout 했을 때는 인포윈도우를 닫습니다\n");
      out.write("        (function(marker, title) {\n");
      out.write("            kakao.maps.event.addListener(marker, 'mouseover', function() {\n");
      out.write("                displayInfowindow(marker, title);\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            kakao.maps.event.addListener(marker, 'mouseout', function() {\n");
      out.write("                infowindow.close();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            itemEl.onmouseover =  function () {\n");
      out.write("                displayInfowindow(marker, title);\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            itemEl.onmouseout =  function () {\n");
      out.write("                infowindow.close();\n");
      out.write("            };\n");
      out.write("            \n");
      out.write("        })(marker, places[i].place_name);\n");
      out.write("\n");
      out.write("        fragment.appendChild(itemEl);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 검색결과 항목들을 검색결과 목록 Element에 추가합니다\n");
      out.write("    listEl.appendChild(fragment);\n");
      out.write("    menuEl.scrollTop = 0;\n");
      out.write("\n");
      out.write("    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n");
      out.write("    map.setBounds(bounds);\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 검색결과 항목을 Element로 반환하는 함수입니다\n");
      out.write("function getListItem(index, places) {\n");
      out.write("\n");
      out.write("    var el = document.createElement('li'),\n");
      out.write("    itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\n");
      out.write("                '<div class=\"info\">' +\n");
      out.write("                '   <h5>' + places.place_name + '</h5>';\n");
      out.write("\n");
      out.write("    if (places.road_address_name) {\n");
      out.write("        itemStr += '    <span>' + places.road_address_name + '</span>' +\n");
      out.write("                    '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\n");
      out.write("    } else {\n");
      out.write("        itemStr += '    <span>' +  places.address_name  + '</span>'; \n");
      out.write("    }\n");
      out.write("                 \n");
      out.write("      itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\n");
      out.write("                '</div>';           \n");
      out.write("\n");
      out.write("    el.innerHTML = itemStr;\n");
      out.write("    el.className = 'item';\n");
      out.write("\n");
      out.write("    return el;\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n");
      out.write("function addMarker(position, idx, title) {\n");
      out.write("    var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\n");
      out.write("        imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\n");
      out.write("        imgOptions =  {\n");
      out.write("            spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\n");
      out.write("            spriteOrigin : new kakao.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n");
      out.write("            offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n");
      out.write("        },\n");
      out.write("        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\n");
      out.write("            marker = new kakao.maps.Marker({\n");
      out.write("            position: position, // 마커의 위치\n");
      out.write("            image: markerImage \n");
      out.write("        });\n");
      out.write("\n");
      out.write("    marker.setMap(map); // 지도 위에 마커를 표출합니다\n");
      out.write("    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\n");
      out.write("\n");
      out.write("    return marker;\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 지도 위에 표시되고 있는 마커를 모두 제거합니다\n");
      out.write("function removeMarker() {\n");
      out.write("    for ( var i = 0; i < markers.length; i++ ) {\n");
      out.write("        markers[i].setMap(null);\n");
      out.write("    }   \n");
      out.write("    markers = [];\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\n");
      out.write("function displayPagination(pagination) {\n");
      out.write("    var paginationEl = document.getElementById('pagination'),\n");
      out.write("        fragment = document.createDocumentFragment(),\n");
      out.write("        i; \n");
      out.write("\n");
      out.write("    // 기존에 추가된 페이지번호를 삭제합니다\n");
      out.write("    while (paginationEl.hasChildNodes()) {\n");
      out.write("        paginationEl.removeChild (paginationEl.lastChild);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    for (i=1; i<=pagination.last; i++) {\n");
      out.write("        var el = document.createElement('a');\n");
      out.write("        el.href = \"#\";\n");
      out.write("        el.innerHTML = i;\n");
      out.write("\n");
      out.write("        if (i===pagination.current) {\n");
      out.write("            el.className = 'on';\n");
      out.write("        } else {\n");
      out.write("            el.onclick = (function(i) {\n");
      out.write("                return function() {\n");
      out.write("                    pagination.gotoPage(i);\n");
      out.write("                }\n");
      out.write("            })(i);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        fragment.appendChild(el);\n");
      out.write("    }\n");
      out.write("    paginationEl.appendChild(fragment);\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\n");
      out.write("// 인포윈도우에 장소명을 표시합니다\n");
      out.write("function displayInfowindow(marker, title) {\n");
      out.write("    var content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\n");
      out.write("\n");
      out.write("    infowindow.setContent(content);\n");
      out.write("    infowindow.open(map, marker);\n");
      out.write("}\n");
      out.write("\n");
      out.write(" // 검색결과 목록의 자식 Element를 제거하는 함수입니다\n");
      out.write("function removeAllChildNods(el) {   \n");
      out.write("    while (el.hasChildNodes()) {\n");
      out.write("        el.removeChild (el.lastChild);\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write(" \n");
      out.write("</script>\n");
      out.write("    ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
