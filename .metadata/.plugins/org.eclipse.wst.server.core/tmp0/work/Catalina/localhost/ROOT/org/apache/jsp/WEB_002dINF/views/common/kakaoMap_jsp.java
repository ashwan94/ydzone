/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-04-27 06:01:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class kakaoMap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<div class=\"row my-3\">\n");
      out.write("	<div class=\"col-1\"></div>\n");
      out.write("	<div id=\"map\" class=\"col-6 rounded mt-3\" style=\"width:85%;height:60vh;\"></div>\n");
      out.write("	<div class=\"col-5\"></div>\n");
      out.write("</div>\n");
      out.write("<div class=\"mb-5\"></div>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=f723cb9688c933e6dc5fe72589256a69&libraries=services\"></script>\n");
      out.write("<script>\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div \n");
      out.write("mapOption = {\n");
      out.write("    center: new kakao.maps.LatLng(36.3268116, 127.4076267), // 지도의 중심좌표\n");
      out.write("    level: 3 // 지도의 확대 레벨\n");
      out.write("};  \n");
      out.write("\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\n");
      out.write("\n");
      out.write("var drawingFlag = false; // 선이 그려지고 있는 상태를 가지고 있을 변수입니다\n");
      out.write("var moveLine; // 선이 그려지고 있을때 마우스 움직임에 따라 그려질 선 객체 입니다\n");
      out.write("var clickLine // 마우스로 클릭한 좌표로 그려질 선 객체입니다\n");
      out.write("var distanceOverlay; // 선의 거리정보를 표시할 커스텀오버레이 입니다\n");
      out.write("var dots = {}; // 선이 그려지고 있을때 클릭할 때마다 클릭 지점과 거리를 표시하는 커스텀 오버레이 배열입니다.\n");
      out.write("\n");
      out.write("// 지도에 클릭 이벤트를 등록합니다\n");
      out.write("// 지도를 클릭하면 선 그리기가 시작됩니다 그려진 선이 있으면 지우고 다시 그립니다\n");
      out.write("kakao.maps.event.addListener(map, 'click', function(mouseEvent) {\n");
      out.write("\n");
      out.write("    // 마우스로 클릭한 위치입니다 \n");
      out.write("    var clickPosition = mouseEvent.latLng;\n");
      out.write("\n");
      out.write("    // 지도 클릭이벤트가 발생했는데 선을 그리고있는 상태가 아니면\n");
      out.write("    if (!drawingFlag) {\n");
      out.write("\n");
      out.write("        // 상태를 true로, 선이 그리고있는 상태로 변경합니다\n");
      out.write("        drawingFlag = true;\n");
      out.write("        \n");
      out.write("        // 지도 위에 선이 표시되고 있다면 지도에서 제거합니다\n");
      out.write("        deleteClickLine();\n");
      out.write("        \n");
      out.write("        // 지도 위에 커스텀오버레이가 표시되고 있다면 지도에서 제거합니다\n");
      out.write("        deleteDistnce();\n");
      out.write("\n");
      out.write("        // 지도 위에 선을 그리기 위해 클릭한 지점과 해당 지점의 거리정보가 표시되고 있다면 지도에서 제거합니다\n");
      out.write("        deleteCircleDot();\n");
      out.write("    \n");
      out.write("        // 클릭한 위치를 기준으로 선을 생성하고 지도위에 표시합니다\n");
      out.write("        clickLine = new kakao.maps.Polyline({\n");
      out.write("            map: map, // 선을 표시할 지도입니다 \n");
      out.write("            path: [clickPosition], // 선을 구성하는 좌표 배열입니다 클릭한 위치를 넣어줍니다\n");
      out.write("            strokeWeight: 3, // 선의 두께입니다 \n");
      out.write("            strokeColor: '#db4040', // 선의 색깔입니다\n");
      out.write("            strokeOpacity: 1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다\n");
      out.write("            strokeStyle: 'solid' // 선의 스타일입니다\n");
      out.write("        });\n");
      out.write("        \n");
      out.write("        // 선이 그려지고 있을 때 마우스 움직임에 따라 선이 그려질 위치를 표시할 선을 생성합니다\n");
      out.write("        moveLine = new kakao.maps.Polyline({\n");
      out.write("            strokeWeight: 3, // 선의 두께입니다 \n");
      out.write("            strokeColor: '#db4040', // 선의 색깔입니다\n");
      out.write("            strokeOpacity: 0.5, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다\n");
      out.write("            strokeStyle: 'solid' // 선의 스타일입니다    \n");
      out.write("        });\n");
      out.write("    \n");
      out.write("        // 클릭한 지점에 대한 정보를 지도에 표시합니다\n");
      out.write("        displayCircleDot(clickPosition, 0);\n");
      out.write("\n");
      out.write("            \n");
      out.write("    } else { // 선이 그려지고 있는 상태이면\n");
      out.write("\n");
      out.write("        // 그려지고 있는 선의 좌표 배열을 얻어옵니다\n");
      out.write("        var path = clickLine.getPath();\n");
      out.write("\n");
      out.write("        // 좌표 배열에 클릭한 위치를 추가합니다\n");
      out.write("        path.push(clickPosition);\n");
      out.write("        \n");
      out.write("        // 다시 선에 좌표 배열을 설정하여 클릭 위치까지 선을 그리도록 설정합니다\n");
      out.write("        clickLine.setPath(path);\n");
      out.write("\n");
      out.write("        var distance = Math.round(clickLine.getLength());\n");
      out.write("        displayCircleDot(clickPosition, distance);\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("    \n");
      out.write("// 지도에 마우스무브 이벤트를 등록합니다\n");
      out.write("// 선을 그리고있는 상태에서 마우스무브 이벤트가 발생하면 그려질 선의 위치를 동적으로 보여주도록 합니다\n");
      out.write("kakao.maps.event.addListener(map, 'mousemove', function (mouseEvent) {\n");
      out.write("\n");
      out.write("    // 지도 마우스무브 이벤트가 발생했는데 선을 그리고있는 상태이면\n");
      out.write("    if (drawingFlag){\n");
      out.write("        \n");
      out.write("        // 마우스 커서의 현재 위치를 얻어옵니다 \n");
      out.write("        var mousePosition = mouseEvent.latLng; \n");
      out.write("\n");
      out.write("        // 마우스 클릭으로 그려진 선의 좌표 배열을 얻어옵니다\n");
      out.write("        var path = clickLine.getPath();\n");
      out.write("        \n");
      out.write("        // 마우스 클릭으로 그려진 마지막 좌표와 마우스 커서 위치의 좌표로 선을 표시합니다\n");
      out.write("        var movepath = [path[path.length-1], mousePosition];\n");
      out.write("        moveLine.setPath(movepath);    \n");
      out.write("        moveLine.setMap(map);\n");
      out.write("        \n");
      out.write("        var distance = Math.round(clickLine.getLength() + moveLine.getLength()), // 선의 총 거리를 계산합니다\n");
      out.write("            content = '<div class=\"dotOverlay distanceInfo\">총거리 <span class=\"number\">' + distance + '</span>m</div>'; // 커스텀오버레이에 추가될 내용입니다\n");
      out.write("        \n");
      out.write("        // 거리정보를 지도에 표시합니다\n");
      out.write("        showDistance(content, mousePosition);   \n");
      out.write("    }             \n");
      out.write("});                 \n");
      out.write("\n");
      out.write("// 지도에 마우스 오른쪽 클릭 이벤트를 등록합니다\n");
      out.write("// 선을 그리고있는 상태에서 마우스 오른쪽 클릭 이벤트가 발생하면 선 그리기를 종료합니다\n");
      out.write("kakao.maps.event.addListener(map, 'rightclick', function (mouseEvent) {\n");
      out.write("\n");
      out.write("    // 지도 오른쪽 클릭 이벤트가 발생했는데 선을 그리고있는 상태이면\n");
      out.write("    if (drawingFlag) {\n");
      out.write("        \n");
      out.write("        // 마우스무브로 그려진 선은 지도에서 제거합니다\n");
      out.write("        moveLine.setMap(null);\n");
      out.write("        moveLine = null;  \n");
      out.write("        \n");
      out.write("        // 마우스 클릭으로 그린 선의 좌표 배열을 얻어옵니다\n");
      out.write("        var path = clickLine.getPath();\n");
      out.write("    \n");
      out.write("        // 선을 구성하는 좌표의 개수가 2개 이상이면\n");
      out.write("        if (path.length > 1) {\n");
      out.write("\n");
      out.write("            // 마지막 클릭 지점에 대한 거리 정보 커스텀 오버레이를 지웁니다\n");
      out.write("            if (dots[dots.length-1].distance) {\n");
      out.write("                dots[dots.length-1].distance.setMap(null);\n");
      out.write("                dots[dots.length-1].distance = null;    \n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var distance = Math.round(clickLine.getLength()), // 선의 총 거리를 계산합니다\n");
      out.write("                content = getTimeHTML(distance); // 커스텀오버레이에 추가될 내용입니다\n");
      out.write("                \n");
      out.write("            // 그려진 선의 거리정보를 지도에 표시합니다\n");
      out.write("            showDistance(content, path[path.length-1]);  \n");
      out.write("             \n");
      out.write("        } else {\n");
      out.write("\n");
      out.write("            // 선을 구성하는 좌표의 개수가 1개 이하이면 \n");
      out.write("            // 지도에 표시되고 있는 선과 정보들을 지도에서 제거합니다.\n");
      out.write("            deleteClickLine();\n");
      out.write("            deleteCircleDot(); \n");
      out.write("            deleteDistnce();\n");
      out.write("\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        // 상태를 false로, 그리지 않고 있는 상태로 변경합니다\n");
      out.write("        drawingFlag = false;          \n");
      out.write("    }  \n");
      out.write("});    \n");
      out.write("\n");
      out.write("// 클릭으로 그려진 선을 지도에서 제거하는 함수입니다\n");
      out.write("function deleteClickLine() {\n");
      out.write("    if (clickLine) {\n");
      out.write("        clickLine.setMap(null);    \n");
      out.write("        clickLine = null;        \n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 마우스 드래그로 그려지고 있는 선의 총거리 정보를 표시하거\n");
      out.write("// 마우스 오른쪽 클릭으로 선 그리가 종료됐을 때 선의 정보를 표시하는 커스텀 오버레이를 생성하고 지도에 표시하는 함수입니다\n");
      out.write("function showDistance(content, position) {\n");
      out.write("    \n");
      out.write("    if (distanceOverlay) { // 커스텀오버레이가 생성된 상태이면\n");
      out.write("        \n");
      out.write("        // 커스텀 오버레이의 위치와 표시할 내용을 설정합니다\n");
      out.write("        distanceOverlay.setPosition(position);\n");
      out.write("        distanceOverlay.setContent(content);\n");
      out.write("        \n");
      out.write("    } else { // 커스텀 오버레이가 생성되지 않은 상태이면\n");
      out.write("        \n");
      out.write("        // 커스텀 오버레이를 생성하고 지도에 표시합니다\n");
      out.write("        distanceOverlay = new kakao.maps.CustomOverlay({\n");
      out.write("            map: map, // 커스텀오버레이를 표시할 지도입니다\n");
      out.write("            content: content,  // 커스텀오버레이에 표시할 내용입니다\n");
      out.write("            position: position, // 커스텀오버레이를 표시할 위치입니다.\n");
      out.write("            xAnchor: 0,\n");
      out.write("            yAnchor: 0,\n");
      out.write("            zIndex: 3  \n");
      out.write("        });      \n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 그려지고 있는 선의 총거리 정보와 \n");
      out.write("// 선 그리가 종료됐을 때 선의 정보를 표시하는 커스텀 오버레이를 삭제하는 함수입니다\n");
      out.write("function deleteDistnce () {\n");
      out.write("    if (distanceOverlay) {\n");
      out.write("        distanceOverlay.setMap(null);\n");
      out.write("        distanceOverlay = null;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 선이 그려지고 있는 상태일 때 지도를 클릭하면 호출하여 \n");
      out.write("// 클릭 지점에 대한 정보 (동그라미와 클릭 지점까지의 총거리)를 표출하는 함수입니다\n");
      out.write("function displayCircleDot(position, distance) {\n");
      out.write("\n");
      out.write("    // 클릭 지점을 표시할 빨간 동그라미 커스텀오버레이를 생성합니다\n");
      out.write("    var circleOverlay = new kakao.maps.CustomOverlay({\n");
      out.write("        content: '<span class=\"dot\"></span>',\n");
      out.write("        position: position,\n");
      out.write("        zIndex: 1\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    // 지도에 표시합니다\n");
      out.write("    circleOverlay.setMap(map);\n");
      out.write("\n");
      out.write("    if (distance > 0) {\n");
      out.write("        // 클릭한 지점까지의 그려진 선의 총 거리를 표시할 커스텀 오버레이를 생성합니다\n");
      out.write("        var distanceOverlay = new kakao.maps.CustomOverlay({\n");
      out.write("            content: '<div class=\"dotOverlay\">거리 <span class=\"number\">' + distance + '</span>m</div>',\n");
      out.write("            position: position,\n");
      out.write("            yAnchor: 1,\n");
      out.write("            zIndex: 2\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // 지도에 표시합니다\n");
      out.write("        distanceOverlay.setMap(map);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 배열에 추가합니다\n");
      out.write("    dots.push({circle:circleOverlay, distance: distanceOverlay});\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 클릭 지점에 대한 정보 (동그라미와 클릭 지점까지의 총거리)를 지도에서 모두 제거하는 함수입니다\n");
      out.write("function deleteCircleDot() {\n");
      out.write("    var i;\n");
      out.write("\n");
      out.write("    for ( i = 0; i < dots.length; i++ ){\n");
      out.write("        if (dots[i].circle) { \n");
      out.write("            dots[i].circle.setMap(null);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if (dots[i].distance) {\n");
      out.write("            dots[i].distance.setMap(null);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    dots = [];\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 마우스 우클릭 하여 선 그리기가 종료됐을 때 호출하여 \n");
      out.write("// 그려진 선의 총거리 정보와 거리에 대한 도보, 자전거 시간을 계산하여\n");
      out.write("// HTML Content를 만들어 리턴하는 함수입니다\n");
      out.write("function getTimeHTML(distance) {\n");
      out.write("\n");
      out.write("    // 도보의 시속은 평균 4km/h 이고 도보의 분속은 67m/min입니다\n");
      out.write("    var walkkTime = distance / 67 | 0;\n");
      out.write("    var walkHour = '', walkMin = '';\n");
      out.write("\n");
      out.write("    // 계산한 도보 시간이 60분 보다 크면 시간으로 표시합니다\n");
      out.write("    if (walkkTime > 60) {\n");
      out.write("        walkHour = '<span class=\"number\">' + Math.floor(walkkTime / 60) + '</span>시간 '\n");
      out.write("    }\n");
      out.write("    walkMin = '<span class=\"number\">' + walkkTime % 60 + '</span>분'\n");
      out.write("\n");
      out.write("    // 자전거의 평균 시속은 16km/h 이고 이것을 기준으로 자전거의 분속은 267m/min입니다\n");
      out.write("    var bycicleTime = distance / 227 | 0;\n");
      out.write("    var bycicleHour = '', bycicleMin = '';\n");
      out.write("\n");
      out.write("    // 계산한 자전거 시간이 60분 보다 크면 시간으로 표출합니다\n");
      out.write("    if (bycicleTime > 60) {\n");
      out.write("        bycicleHour = '<span class=\"number\">' + Math.floor(bycicleTime / 60) + '</span>시간 '\n");
      out.write("    }\n");
      out.write("    bycicleMin = '<span class=\"number\">' + bycicleTime % 60 + '</span>분'\n");
      out.write("\n");
      out.write("    // 거리와 도보 시간, 자전거 시간을 가지고 HTML Content를 만들어 리턴합니다\n");
      out.write("    var content = '<ul class=\"dotOverlay distanceInfo\">';\n");
      out.write("    content += '    <li>';\n");
      out.write("    content += '        <span class=\"label\">총거리</span><span class=\"number\">' + distance + '</span>m';\n");
      out.write("    content += '    </li>';\n");
      out.write("    content += '    <li>';\n");
      out.write("    content += '        <span class=\"label\">도보</span>' + walkHour + walkMin;\n");
      out.write("    content += '    </li>';\n");
      out.write("    content += '    <li>';\n");
      out.write("    content += '        <span class=\"label\">자전거</span>' + bycicleHour + bycicleMin;\n");
      out.write("    content += '    </li>';\n");
      out.write("    content += '</ul>'\n");
      out.write("\n");
      out.write("    return content;\n");
      out.write("}\n");
      out.write("    \n");
      out.write("</script>\n");
      out.write("    ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
